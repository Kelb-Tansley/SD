// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SD.Tests.Strand7.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ElementLengthFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ElementLength.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ElementLength", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ElementLength")))
            {
                global::SD.Tests.Strand7.Features.ElementLengthFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Determine the effective length 2 of beam 1 in axis 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ElementLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EffectiveLength2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Axis2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Beam1")]
        public void DetermineTheEffectiveLength2OfBeam1InAxis2()
        {
            string[] tagsOfScenario = new string[] {
                    "EffectiveLength2",
                    "Axis2",
                    "Beam1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the effective length 2 of beam 1 in axis 2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("the fem test file name is Element Length Tests.st7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When("SANS ULS design is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then("the L2 chain length of beam 1 should be 14366.6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Determine the effective length 1 of beam 1 in axis 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ElementLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EffectiveLength1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Axis2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Beam1")]
        public void DetermineTheEffectiveLength1OfBeam1InAxis2()
        {
            string[] tagsOfScenario = new string[] {
                    "EffectiveLength1",
                    "Axis2",
                    "Beam1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the effective length 1 of beam 1 in axis 2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
 testRunner.Given("the fem test file name is Element Length Tests.st7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.When("SANS ULS design is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("the L1 chain length of beam 1 should be 16733.2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Determine the effective length 2 of beam 3 in axis 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ElementLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EffectiveLength2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Axis2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Beam3")]
        public void DetermineTheEffectiveLength2OfBeam3InAxis2()
        {
            string[] tagsOfScenario = new string[] {
                    "EffectiveLength2",
                    "Axis2",
                    "Beam3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the effective length 2 of beam 3 in axis 2", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.Given("the fem test file name is Element Length Tests.st7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
 testRunner.When("SANS ULS design is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then("the L2 chain length of beam 3 should be 3000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Determine the effective length 2 of beam 3 in axis 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ElementLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EffectiveLength2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Axis1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Beam3")]
        public void DetermineTheEffectiveLength2OfBeam3InAxis1()
        {
            string[] tagsOfScenario = new string[] {
                    "EffectiveLength2",
                    "Axis1",
                    "Beam3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the effective length 2 of beam 3 in axis 1", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
 testRunner.Given("the fem test file name is Element Length Tests.st7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
 testRunner.When("SANS ULS design is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then("the L2 chain length of beam 3 should be 6000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Determine the effective length 1 of beam 2 in axis 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ElementLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EffectiveLength1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Axis3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Beam2")]
        public void DetermineTheEffectiveLength1OfBeam2InAxis3()
        {
            string[] tagsOfScenario = new string[] {
                    "EffectiveLength1",
                    "Axis3",
                    "Beam2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the effective length 1 of beam 2 in axis 3", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
 testRunner.Given("the fem test file name is Element Length Tests.st7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.When("SANS ULS design is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.Then("the L1 chain length of beam 2 should be 9000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Determine the effective length 1 of beam 4 in axis 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ElementLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EffectiveLength1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Axis3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Beam4")]
        public void DetermineTheEffectiveLength1OfBeam4InAxis3()
        {
            string[] tagsOfScenario = new string[] {
                    "EffectiveLength1",
                    "Axis3",
                    "Beam4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the effective length 1 of beam 4 in axis 3", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
 testRunner.Given("the fem test file name is Element Length Tests.st7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
 testRunner.When("SANS ULS design is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.Then("the L1 chain length of beam 4 should be 9000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Determine the effective length 2 of beam 4 in axis 3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ElementLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EffectiveLength2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Axis3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Beam4")]
        public void DetermineTheEffectiveLength2OfBeam4InAxis3()
        {
            string[] tagsOfScenario = new string[] {
                    "EffectiveLength2",
                    "Axis3",
                    "Beam4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the effective length 2 of beam 4 in axis 3", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
 testRunner.Given("the fem test file name is Element Length Tests.st7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
 testRunner.When("SANS ULS design is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then("the L2 chain length of beam 4 should be 14366.6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Determine the effective length 1 of beam 2 in axis 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ElementLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EffectiveLength1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Axis1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Beam2")]
        public void DetermineTheEffectiveLength1OfBeam2InAxis1()
        {
            string[] tagsOfScenario = new string[] {
                    "EffectiveLength1",
                    "Axis1",
                    "Beam2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the effective length 1 of beam 2 in axis 1", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
 testRunner.Given("the fem test file name is Element Length Tests.st7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
 testRunner.When("SANS ULS design is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
 testRunner.Then("the L1 chain length of beam 2 should be 9000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Determine the effective length 1 of beam 3 in axis 1 with beam restraints")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ElementLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EffectiveLength1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Axis1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Beam3")]
        public void DetermineTheEffectiveLength1OfBeam3InAxis1WithBeamRestraints()
        {
            string[] tagsOfScenario = new string[] {
                    "EffectiveLength1",
                    "Axis1",
                    "Beam3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the effective length 1 of beam 3 in axis 1 with beam restraints", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 53
 testRunner.Given("the fem test file name is Element Length Restraint Tests.st7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
 testRunner.When("SANS ULS design is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.Then("the L1 chain length of beam 3 should be 1000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Determine the effective length 1 of beam 1 in axis 1 with beam restraints")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ElementLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EffectiveLength1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Axis1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Beam1")]
        public void DetermineTheEffectiveLength1OfBeam1InAxis1WithBeamRestraints()
        {
            string[] tagsOfScenario = new string[] {
                    "EffectiveLength1",
                    "Axis1",
                    "Beam1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the effective length 1 of beam 1 in axis 1 with beam restraints", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 59
 testRunner.Given("the fem test file name is Element Length Restraint Tests.st7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
 testRunner.When("SANS ULS design is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.Then("the L1 chain length of beam 1 should be 2000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Determine the effective length 1 of beam 4 in axis 3 with beam restraints")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ElementLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EffectiveLength1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Axis3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Beam4")]
        public void DetermineTheEffectiveLength1OfBeam4InAxis3WithBeamRestraints()
        {
            string[] tagsOfScenario = new string[] {
                    "EffectiveLength1",
                    "Axis3",
                    "Beam4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the effective length 1 of beam 4 in axis 3 with beam restraints", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 65
 testRunner.Given("the fem test file name is Element Length Restraint Tests.st7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
 testRunner.When("SANS ULS design is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.Then("the L1 chain length of beam 4 should be 2000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Determine the effective length 2 of beam 2 in axis 3 with beam restraints")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ElementLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EffectiveLength2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Axis3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Beam2")]
        public void DetermineTheEffectiveLength2OfBeam2InAxis3WithBeamRestraints()
        {
            string[] tagsOfScenario = new string[] {
                    "EffectiveLength2",
                    "Axis3",
                    "Beam2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the effective length 2 of beam 2 in axis 3 with beam restraints", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 71
 testRunner.Given("the fem test file name is Element Length Restraint Tests.st7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 72
 testRunner.When("SANS ULS design is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
 testRunner.Then("the L2 chain length of beam 2 should be 2000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Determine the effective length 2 of beam 10 in axis 2 with beam restraints")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ElementLength")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("EffectiveLength2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Axis2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Beam10")]
        public void DetermineTheEffectiveLength2OfBeam10InAxis2WithBeamRestraints()
        {
            string[] tagsOfScenario = new string[] {
                    "EffectiveLength2",
                    "Axis2",
                    "Beam10"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the effective length 2 of beam 10 in axis 2 with beam restraints", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 77
 testRunner.Given("the fem test file name is Element Length Restraint Tests.st7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 78
 testRunner.When("SANS ULS design is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
 testRunner.Then("the L2 chain length of beam 10 should be 2000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
